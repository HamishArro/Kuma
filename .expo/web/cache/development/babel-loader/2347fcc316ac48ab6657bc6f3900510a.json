{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/hamisharro/Documents/Projects/My Portfolio/JavaScript/Kuma/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { GLView } from \"expo-gl\";\nimport { Renderer } from \"expo-three\";\nimport { AmbientLight, SphereGeometry, Fog, GridHelper, Mesh, MeshStandardMaterial, PerspectiveCamera, PointLight, Scene, SpotLight } from \"three\";\nvar sphere = new SphereMesh();\nvar camera = new PerspectiveCamera(100, 0.4, 0.01, 1000);\nvar cameraInitialPositionX = 0;\nvar cameraInitialPositionY = 2;\nvar cameraInitialPositionZ = 5;\n\nvar App = function App() {\n  return React.createElement(GLView, {\n    style: {\n      flex: 1\n    },\n    onContextCreate: function _callee(gl) {\n      var width, height, renderer, scene, ambientLight, pointLight, spotLight, render;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              width = gl.drawingBufferWidth, height = gl.drawingBufferHeight;\n              renderer = new Renderer({\n                gl: gl\n              });\n              renderer.setSize(width, height);\n              renderer.setClearColor(\"#fff\");\n              scene = new Scene();\n              scene.fog = new Fog(\"#3A96C4\", 1, 10000);\n              scene.add(new GridHelper(10, 10));\n              ambientLight = new AmbientLight(0x101010);\n              scene.add(ambientLight);\n              pointLight = new PointLight(0xffffff, 2, 1000, 1);\n              pointLight.position.set(0, 200, 200);\n              scene.add(pointLight);\n              spotLight = new SpotLight(0xffffff, 0.5);\n              spotLight.position.set(0, 500, 100);\n              spotLight.lookAt(scene.position);\n              scene.add(spotLight);\n              scene.add(sphere);\n              camera.position.set(cameraInitialPositionX, cameraInitialPositionY, cameraInitialPositionZ);\n              camera.lookAt(sphere.position);\n\n              render = function render() {\n                requestAnimationFrame(render);\n                renderer.render(scene, camera);\n                gl.endFrameEXP();\n              };\n\n              render();\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  });\n};\n\nvar SphereMesh = function (_Mesh) {\n  _inherits(SphereMesh, _Mesh);\n\n  var _super = _createSuper(SphereMesh);\n\n  function SphereMesh() {\n    _classCallCheck(this, SphereMesh);\n\n    return _super.call(this, new SphereGeometry(0, 50, 20, 0, Math.PI * 2, 0, Math.PI * 2), new MeshStandardMaterial({\n      color: 0xff0000\n    }));\n  }\n\n  return SphereMesh;\n}(Mesh);","map":{"version":3,"sources":["/Users/hamisharro/Documents/Projects/My Portfolio/JavaScript/Kuma/App.js"],"names":["React","GLView","Renderer","AmbientLight","SphereGeometry","Fog","GridHelper","Mesh","MeshStandardMaterial","PerspectiveCamera","PointLight","Scene","SpotLight","sphere","SphereMesh","camera","cameraInitialPositionX","cameraInitialPositionY","cameraInitialPositionZ","App","flex","gl","width","drawingBufferWidth","height","drawingBufferHeight","renderer","setSize","setClearColor","scene","fog","add","ambientLight","pointLight","position","set","spotLight","lookAt","render","requestAnimationFrame","endFrameEXP","Math","PI","color"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, TouchableWithoutFeedback, Text } from \"react-native\";\nimport { GLView } from \"expo-gl\";\nimport { Renderer } from \"expo-three\";\n\nimport {\n  AmbientLight,\n  SphereGeometry,\n  Fog,\n  GridHelper,\n  Mesh,\n  MeshStandardMaterial,\n  PerspectiveCamera,\n  PointLight,\n  Scene,\n  SpotLight,\n} from \"three\";\n\nconst sphere = new SphereMesh();\nconst camera = new PerspectiveCamera(100, 0.4, 0.01, 1000);\n\nlet cameraInitialPositionX = 0;\nlet cameraInitialPositionY = 2;\nlet cameraInitialPositionZ = 5;\n\nconst App = () => {\n  return (\n    <GLView\n      style={{ flex: 1 }}\n      onContextCreate={async (gl) => {\n        // GL Parameter disruption\n        const { drawingBufferWidth: width, drawingBufferHeight: height } = gl;\n\n        // Renderer declaration and set properties\n        const renderer = new Renderer({ gl });\n        renderer.setSize(width, height);\n        renderer.setClearColor(\"#fff\");\n\n        // Scene declaration, add a fog, and a grid helper to see axes dimensions\n        const scene = new Scene();\n        scene.fog = new Fog(\"#3A96C4\", 1, 10000);\n        scene.add(new GridHelper(10, 10));\n\n        // Add all necessary lights\n        const ambientLight = new AmbientLight(0x101010);\n        scene.add(ambientLight);\n\n        const pointLight = new PointLight(0xffffff, 2, 1000, 1);\n        pointLight.position.set(0, 200, 200);\n        scene.add(pointLight);\n\n        const spotLight = new SpotLight(0xffffff, 0.5);\n        spotLight.position.set(0, 500, 100);\n        spotLight.lookAt(scene.position);\n        scene.add(spotLight);\n\n        // Add sphere object instance to our scene\n        scene.add(sphere);\n\n        // Set camera position and look to sphere\n        camera.position.set(\n          cameraInitialPositionX,\n          cameraInitialPositionY,\n          cameraInitialPositionZ\n        );\n\n        camera.lookAt(sphere.position);\n\n        // Render function\n        const render = () => {\n          requestAnimationFrame(render);\n          renderer.render(scene, camera);\n          gl.endFrameEXP();\n        };\n        render();\n      }}\n    />\n  );\n};\n\nclass SphereMesh extends Mesh {\n  constructor() {\n    super(\n      new SphereGeometry(0, 50, 20, 0, Math.PI * 2, 0, Math.PI * 2),\n      new MeshStandardMaterial({\n        color: 0xff0000,\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}