{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/hamisharro/Documents/Projects/My Portfolio/JavaScript/Kuma/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { View as GraphicsView } from \"expo-graphics\";\nimport ExpoTHREE, { THREE } from \"expo-three\";\nimport React from \"react\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader.js\";\nimport { MTLLoader } from \"three/examples/jsm/loaders/MTLLoader.js\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onContextCreate = function _callee(_ref) {\n      var gl, canvas, width, height, pixelRatio, geometry, material, light, name;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              gl = _ref.gl, canvas = _ref.canvas, width = _ref.width, height = _ref.height, pixelRatio = _ref.scale;\n              _this.renderer = new ExpoTHREE.Renderer({\n                gl: gl,\n                pixelRatio: pixelRatio,\n                width: width,\n                height: height\n              });\n\n              _this.renderer.setClearColor(0xffffff);\n\n              _this.scene = new THREE.Scene();\n              _this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n              _this.camera.position.z = 5;\n              geometry = new THREE.BoxGeometry(1, 1, 1);\n              material = new THREE.MeshPhongMaterial({\n                color: 0xff0000\n              });\n              _this.cube = new THREE.Mesh(geometry, material);\n\n              _this.scene.add(_this.cube);\n\n              _this.scene.add(new THREE.AmbientLight(0x404040));\n\n              light = new THREE.DirectionalLight(0xffffff, 0.5);\n              light.position.set(3, 3, 3);\n\n              _this.scene.add(light);\n\n              name = \"eyeball\";\n              loadMesh(\"eyeball\", function (obj) {\n                obj.position.x = 0;\n                obj.position.y = 0;\n                obj.position.z = 450;\n                obj.rotation.x += 1;\n                obj.scale.x = 0.1;\n                obj.scale.y = 0.1;\n                obj.scale.z = 0.1;\n                scene.add(mesh);\n                addMesh(obj);\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.onRender = function (delta) {\n      _this.cube.rotation.x += 2 * delta;\n      _this.cube.rotation.y += 2 * delta;\n\n      _this.renderer.render(_this.scene, _this.camera);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      THREE.suppressExpoWarnings();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GraphicsView, {\n        onContextCreate: this.onContextCreate,\n        onRender: this.onRender,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };\n\nfunction addMesh(mesh) {\n  console.log(mesh.getWorldPosition());\n}\n\nfunction loadMesh(name, callback) {\n  var mtlLoader = new MTLLoader();\n  mtlLoader.setPath(\"./models/eyeball/\");\n  mtlLoader.load(\"eyeball.mtl\", function (materials) {\n    materials.preload();\n    var objLoader = new OBJLoader();\n    objLoader.setMaterials(materials);\n    objLoader.setPath(\"./models/eyeball/\");\n    objLoader.load(\"eyeball.obj\", function (object) {\n      this.scene.add(object);\n    }, function (xhr) {\n      console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n    }, function (error) {\n      console.log(\"An error happened - objLoader\");\n    });\n  }, function (xhr) {\n    console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n  }, function (error) {\n    console.log(\"An error happened - matLoader\");\n  });\n}","map":{"version":3,"sources":["/Users/hamisharro/Documents/Projects/My Portfolio/JavaScript/Kuma/App.js"],"names":["View","GraphicsView","ExpoTHREE","THREE","React","OBJLoader","MTLLoader","App","onContextCreate","gl","canvas","width","height","pixelRatio","scale","renderer","Renderer","setClearColor","scene","Scene","camera","PerspectiveCamera","position","z","geometry","BoxGeometry","material","MeshPhongMaterial","color","cube","Mesh","add","AmbientLight","light","DirectionalLight","set","name","loadMesh","obj","x","y","rotation","mesh","addMesh","onRender","delta","render","suppressExpoWarnings","Component","console","log","getWorldPosition","callback","mtlLoader","setPath","load","materials","preload","objLoader","setMaterials","object","xhr","loaded","total","error"],"mappings":"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","sourcesContent":["import { View as GraphicsView } from \"expo-graphics\";\nimport ExpoTHREE, { THREE } from \"expo-three\";\nimport React from \"react\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader.js\";\nimport { MTLLoader } from \"three/examples/jsm/loaders/MTLLoader.js\";\n\nexport default class App extends React.Component {\n  componentDidMount() {\n    THREE.suppressExpoWarnings();\n  }\n\n  render() {\n    // Create an `ExpoGraphics.View` covering the whole screen, tell it to call our\n    // `onContextCreate` function once it's initialized.\n    return (\n      <GraphicsView\n        onContextCreate={this.onContextCreate}\n        onRender={this.onRender}\n      />\n    );\n  }\n\n  // This is called by the `ExpoGraphics.View` once it's initialized\n  onContextCreate = async ({\n    gl,\n    canvas,\n    width,\n    height,\n    scale: pixelRatio,\n  }) => {\n    this.renderer = new ExpoTHREE.Renderer({ gl, pixelRatio, width, height });\n    this.renderer.setClearColor(0xffffff);\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 5;\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n\n    const material = new THREE.MeshPhongMaterial({\n      color: 0xff0000,\n    });\n\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n\n    this.scene.add(new THREE.AmbientLight(0x404040));\n\n    const light = new THREE.DirectionalLight(0xffffff, 0.5);\n    light.position.set(3, 3, 3);\n    this.scene.add(light);\n\n    const name = \"eyeball\";\n\n    loadMesh(\"eyeball\", function (obj) {\n      obj.position.x = 0;\n      obj.position.y = 0;\n      obj.position.z = 450;\n      obj.rotation.x += 1;\n      //obj.rotation.y -= 1;\n      obj.scale.x = 0.1;\n      obj.scale.y = 0.1;\n      obj.scale.z = 0.1;\n      scene.add(mesh);\n      addMesh(obj);\n    });\n  };\n\n  onRender = (delta) => {\n    this.cube.rotation.x += 2 * delta;\n    this.cube.rotation.y += 2 * delta;\n    this.renderer.render(this.scene, this.camera);\n  };\n}\n\nfunction addMesh(mesh) {\n  console.log(mesh.getWorldPosition());\n}\n\nfunction loadMesh(name, callback) {\n  var mtlLoader = new MTLLoader();\n  mtlLoader.setPath(\"./models/eyeball/\");\n  mtlLoader.load(\n    \"eyeball.mtl\",\n    function (materials) {\n      materials.preload();\n      const objLoader = new OBJLoader();\n      objLoader.setMaterials(materials);\n      objLoader.setPath(\"./models/eyeball/\");\n      objLoader.load(\n        \"eyeball.obj\",\n        function (object) {\n          this.scene.add(object);\n        },\n        function (xhr) {\n          console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n        },\n        function (error) {\n          console.log(\"An error happened - objLoader\");\n        }\n      );\n    },\n    function (xhr) {\n      console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n    },\n    function (error) {\n      console.log(\"An error happened - matLoader\");\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}